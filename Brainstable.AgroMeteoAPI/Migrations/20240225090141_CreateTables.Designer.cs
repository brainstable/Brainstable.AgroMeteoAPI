// <auto-generated />
using System;
using Brainstable.AgroMeteoAPI.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Brainstable.AgroMeteoAPI.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20240225090141_CreateTables")]
    partial class CreateTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Brainstable.AgroMeteoAPI.Entities.Models.MeteoDay", b =>
                {
                    b.Property<int>("MeteoStationId")
                        .HasColumnType("integer")
                        .HasColumnName("meteo_station_id");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<double?>("Humidity")
                        .HasColumnType("double precision")
                        .HasColumnName("h");

                    b.Property<double?>("MaxTemperature")
                        .HasColumnType("double precision")
                        .HasColumnName("tmax");

                    b.Property<double?>("MinTemperature")
                        .HasColumnType("double precision")
                        .HasColumnName("tmin");

                    b.Property<double?>("Rainfall")
                        .HasColumnType("double precision")
                        .HasColumnName("r");

                    b.Property<double?>("SnowHight")
                        .HasColumnType("double precision")
                        .HasColumnName("sh");

                    b.Property<double?>("Temperature")
                        .HasColumnType("double precision")
                        .HasColumnName("t");

                    b.HasKey("MeteoStationId", "Date");

                    b.ToTable("meteo_days");
                });

            modelBuilder.Entity("Brainstable.AgroMeteoAPI.Entities.Models.MeteoStation", b =>
                {
                    b.Property<int>("MeteoStationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("meteo_station_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MeteoStationId"));

                    b.Property<double?>("Altitude")
                        .HasColumnType("double precision")
                        .HasColumnName("alt");

                    b.Property<string>("CountryAlpha2")
                        .HasColumnType("text")
                        .HasColumnName("country_alpha_2");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("lat");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("lon");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("NameEng")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name_eng");

                    b.Property<string>("NameRus")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name_rus");

                    b.HasKey("MeteoStationId");

                    b.ToTable("meteo_stations");
                });

            modelBuilder.Entity("Brainstable.AgroMeteoAPI.Entities.Models.MeteoDay", b =>
                {
                    b.HasOne("Brainstable.AgroMeteoAPI.Entities.Models.MeteoStation", "MeteoStation")
                        .WithMany("MeteoDays")
                        .HasForeignKey("MeteoStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeteoStation");
                });

            modelBuilder.Entity("Brainstable.AgroMeteoAPI.Entities.Models.MeteoStation", b =>
                {
                    b.Navigation("MeteoDays");
                });
#pragma warning restore 612, 618
        }
    }
}
